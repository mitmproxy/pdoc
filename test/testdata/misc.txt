<module misc
    <class misc.Issue226
        <method def __init__(): ...>
        <var size  # This is the size>>
    <var var_with_default_obj = <object object>  # this shouldn't rende…>
    <method def var_with_default_func(): ...  # inherited from misc.default_func>
    <function def func_with_defaults(a=<object object>, b=<function default_func>): ...  # this shouldn't rende…>
    <class misc.ClassmethodLink  # You can either do

    >…
        <method def __init__(): ...>
        <@classmethod class def bar(cls): ...>>
    <class misc.GenericParent  # Abstract base class …
        <method def __init__(): ...>>
    <class misc.NonGenericChild  # Abstract base class …
        <method def __init__(): ...>>
    <class misc.Child
        <method def __init__(self): ...  # init>
        <method def foo(self): ...  # foo>
        <@classmethod class def bar(cls): ...  # bar>
        <@staticmethod static def baz(): ...  # baz>
        <var qux  # qux>
        <var quux>
        <var quuux: int = 42  # quuux>>
    <var only_annotated: int>
    <class misc.CustomException  # custom exception typ…
        <method def __init__(self, /, *args, **kwargs): ...  # inherited from builtins.RuntimeError.__init__>
        <method def with_traceback(unknown): ...  # inherited from builtins.BaseException.with_traceback, Exception.with_trace…>
        <var args  # inherited from builtins.BaseException.args>>
    <class misc.LambdaAttr
        <method def __init__(): ...>
        <method def attr(x): ...>>
    <function def foo(): ...  # no indents>
    <function def bar(): ...  # no
    indents>
    <function def baz(): ...  # one
    indent>
    <function def qux(): ...  # two
    indents>
    <class misc.Indented
        <method def __init__(): ...>
        <method def foo(self): ...  # no indents>
        <method def bar(self): ...  # no
        indents>
        <method def baz(self): ...  # one
        indent>
        <method def qux(self): ...  # two
        indents>
        <@lru_cache() method def foo_decorated(self): ...  # no indents>
        <@lru_cache() method def foo_commented(self): ...  # no indents>
        <@lru_cache() method def bar_decorated(self): ...  # no
        indents>
        <@lru_cache() method def baz_decorated(self): ...  # one
        indent>
        <@lru_cache() method def qux_decorated(self): ...  # two
        indents>
        <@lru_cache(maxsize=42) method def quux_decorated(self): ...  # multi-line decorator…>>
    <@_protected_decorator function def fun_with_protected_decorator(): ...  # This function has a …>
    <method def unhashable(unknown): ...>
    <class misc.AbstractClass  # This class shouldn't…
        <@abc.abstractmethod method def foo(self): ...>>>