<module misc_py313
    <class misc_py313.MyDict
        <method def get(self, key, default=None, /): ...  # inherited from builtins.dict.get, Return the value for…>
        <method def setdefault(self, key, default=None, /): ...  # inherited from builtins.dict.setdefault, Insert key with a va…>
        <method def pop(unknown): ...  # inherited from builtins.dict.pop, D.pop(k[,d]) -> v, r…>
        <method def popitem(self, /): ...  # inherited from builtins.dict.popitem, Remove and return a …>
        <method def keys(self, /): ...  # inherited from builtins.dict.keys, Return a set-like ob…>
        <method def items(self, /): ...  # inherited from builtins.dict.items, Return a set-like ob…>
        <method def values(self, /): ...  # inherited from builtins.dict.values, Return an object pro…>
        <method def update(unknown): ...  # inherited from builtins.dict.update, D.update([E, ]**F) -…>
        <method def fromkeys(type, iterable, value=None, /): ...  # inherited from builtins.dict.fromkeys, Create a new diction…>
        <method def clear(self, /): ...  # inherited from builtins.dict.clear, Remove all items fro…>
        <method def copy(self, /): ...  # inherited from builtins.dict.copy, Return a shallow cop…>
    >
    <class misc_py313.CustomException  # custom exception typ…
        <method def __init__(self, /, *args, **kwargs): ...  # inherited from builtins.RuntimeError.__init__>
        <method def with_traceback(self, object, /): ...  # inherited from builtins.BaseException.with_traceback, Exception.with_trace…>
        <method def add_note(self, object, /): ...  # inherited from builtins.BaseException.add_note, Exception.add_note(n…>
        <var args  # inherited from builtins.BaseException.args>
    >
>