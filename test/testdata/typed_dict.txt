<module typed_dict
    <class typed_dict.Foo
        <var a: Optional[int]  # First attribute.>
        <method def get(self, key, default=None, /): ...  # inherited from builtins.dict.get, Return the value for…>
        <method def setdefault(self, key, default=None, /): ...  # inherited from builtins.dict.setdefault, Insert key with a va…>
        <method def pop(unknown): ...  # inherited from builtins.dict.pop, D.pop(k[,d]) -> v, r…>
        <method def popitem(self, /): ...  # inherited from builtins.dict.popitem, Remove and return a …>
        <method def keys(self, /): ...  # inherited from builtins.dict.keys, Return a set-like ob…>
        <method def items(self, /): ...  # inherited from builtins.dict.items, Return a set-like ob…>
        <method def values(self, /): ...  # inherited from builtins.dict.values, Return an object pro…>
        <method def update(unknown): ...  # inherited from builtins.dict.update, D.update([E, ]**F) -…>
        <method def fromkeys(type, iterable, value=None, /): ...  # inherited from builtins.dict.fromkeys, Create a new diction…>
        <method def clear(self, /): ...  # inherited from builtins.dict.clear, Remove all items fro…>
        <method def copy(self, /): ...  # inherited from builtins.dict.copy, Return a shallow cop…>
    >
    <class typed_dict.Bar  # A TypedDict subclass…
        <var a: Optional[int]  # inherited from typed_dict.Foo.a, First attribute.>
        <var b: int  # Second attribute.>
        <var c: str>
        <method def get(self, key, default=None, /): ...  # inherited from builtins.dict.get, Return the value for…>
        <method def setdefault(self, key, default=None, /): ...  # inherited from builtins.dict.setdefault, Insert key with a va…>
        <method def pop(unknown): ...  # inherited from builtins.dict.pop, D.pop(k[,d]) -> v, r…>
        <method def popitem(self, /): ...  # inherited from builtins.dict.popitem, Remove and return a …>
        <method def keys(self, /): ...  # inherited from builtins.dict.keys, Return a set-like ob…>
        <method def items(self, /): ...  # inherited from builtins.dict.items, Return a set-like ob…>
        <method def values(self, /): ...  # inherited from builtins.dict.values, Return an object pro…>
        <method def update(unknown): ...  # inherited from builtins.dict.update, D.update([E, ]**F) -…>
        <method def fromkeys(type, iterable, value=None, /): ...  # inherited from builtins.dict.fromkeys, Create a new diction…>
        <method def clear(self, /): ...  # inherited from builtins.dict.clear, Remove all items fro…>
        <method def copy(self, /): ...  # inherited from builtins.dict.copy, Return a shallow cop…>
    >
    <class typed_dict.Baz  # A TypedDict subsubcl…
        <var b: int  # inherited from typed_dict.Bar.b, Second attribute.>
        <var c: str  # inherited from typed_dict.Bar.c>
        <var a: Optional[int]  # inherited from typed_dict.Foo.a, First attribute.>
        <var d: bool  # new attribute>
        <method def get(self, key, default=None, /): ...  # inherited from builtins.dict.get, Return the value for…>
        <method def setdefault(self, key, default=None, /): ...  # inherited from builtins.dict.setdefault, Insert key with a va…>
        <method def pop(unknown): ...  # inherited from builtins.dict.pop, D.pop(k[,d]) -> v, r…>
        <method def popitem(self, /): ...  # inherited from builtins.dict.popitem, Remove and return a …>
        <method def keys(self, /): ...  # inherited from builtins.dict.keys, Return a set-like ob…>
        <method def items(self, /): ...  # inherited from builtins.dict.items, Return a set-like ob…>
        <method def values(self, /): ...  # inherited from builtins.dict.values, Return an object pro…>
        <method def update(unknown): ...  # inherited from builtins.dict.update, D.update([E, ]**F) -…>
        <method def fromkeys(type, iterable, value=None, /): ...  # inherited from builtins.dict.fromkeys, Create a new diction…>
        <method def clear(self, /): ...  # inherited from builtins.dict.clear, Remove all items fro…>
        <method def copy(self, /): ...  # inherited from builtins.dict.copy, Return a shallow cop…>
    >
>